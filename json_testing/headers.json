["from math import sqrt\n\n\ndef arrangeCoins(n: int) -> int:\n", "\ndef findDelayedArrivalTime( arrivalTime: int, delayedTime: int) -> int:\n", "from typing import List\n\n\ndef findContentChildren(g: List[int], s: List[int]) -> int:\n", "\ndef some_function( salary) -> float:\n", "\ndef binaryGap(n: int) -> int:\n", "\ndef containsDuplicate(nums):\n", "\ndef isAnagram(s, t):\n", "from typing import List\n\n\ndef numUniqueEmails(emails: List[str]) -> int:\n", "\ndef isHappy(n: int) -> bool:\n", "from typing import List\n\n\ndef isMonotonic(nums: List[int]) -> bool:\n", "\ndef checkStraightLine(coordinates):\n", "\ndef detectCapitalUse(word: str) -> bool:\n", "from typing import List\n\n\ndef countNegatives(grid: List[List[int]]) -> int:\n", "from collections import Counter\n\n\ndef firstUniqChar(s: str) -> int:\n", "\ndef generatePossibleNextMoves(currentState: str) :\n", "\ndef divisorGame(n: int) -> bool:\n", "\ndef numJewelsInStones(jewels: str, stones: str) -> int:\n", "\ndef kItemsWithMaximumSum( numOnes: int, numZeros: int, numNegOnes: int, k: int) -> int:\n", "\ndef kItemsWithMaximumSum(numOnes: int, numZeros: int, numNegOnes: int, k: int) -> int:\n", "from typing import List\n\n\ndef largestTriangleArea(points: List[List[int]]) -> float:\n", "from typing import List\nfrom bisect import insort_left\n\n\ndef lastStoneWeight(stones: List[int]) -> int:\n", "\ndef longestCommonPrefix(strs):\n", "\ndef findLHS(nums) -> int:\n", "\ndef maxProfit(prices):\n", "\ndef merge(nums1, m, nums2, n):\n", "\ndef mergeTwoLists(list1, list2):\n", "\ndef findRestaurant(list1, list2) :\n", "\ndef moveZeroes(nums) -> None:\n", "from typing import List\n\n\ndef findOcurrences(text: str, first: str, second: str) -> List[str]:\n", "\ndef isPalindrome(x):\n", "\ndef check_is_prime(n):\n", "\ndef countPrimeSetBits(left: int, right: int) -> int:\n", "from typing import List\n\n\ndef isRectangleOverlap(rec1: List[int], rec2: List[int]) -> bool:\n", "\ndef removeDuplicates(s: str) -> str:\n", "\ndef removeDuplicates(nums):\n", "\ndef removeElement(nums, val):\n", "\ndef removeOuterParentheses(s: str) -> str:\n", "\ndef reverseVowels(s: str) -> str:\n", "\ndef romanToInt(s):\n", "from typing import List\n\n\ndef selfDividingNumbers(left: int, right: int) -> List[int]:\n", "from typing import List\n\n\ndef areSentencesSimilar(sentence1, sentence2, similarPairs) :\n", "from typing import List\n\n\ndef sortedSquares(nums: List[int]) -> List[int]:\n", "\ndef sumOfMultiples( n: int) -> int:\n", "from typing import List\n\n\ndef surfaceArea(grid: List[List[int]]) -> int:\n", "\ndef twoSum(nums, target):\n", "\ndef isValid( s: str) -> bool:\n", "from typing import List\n\n\ndef isBoomerang(points: List[List[int]]) -> bool:\n", "\ndef validWordAbbreviation(word: str, abbr: str) -> bool:\n", "from typing import List\n\n\ndef isAlienSorted(words: List[str], order: str) -> bool:\n", "\ndef increasing_triplet(nums):\n", "from collections import Counter\n\n\ndef intersection(nums1, nums2):\n", "\ndef k_smallest_pairs(nums1, nums2, k):\n", "\ndef kth_smallest_in_matrix(matrix, k):\n", "\ndef first_duplicate_in_list(lst):\n", "\ndef nth_digit_in_sequence(n):\n", "\ndef cross_product(vector1, vector2):\n", "\ndef fib(n):  # return Fibonacci series up to n\n", "\ndef reverse_string_recursive(string):\n", "\ndef caesar_cipher(string, key):\n", "\ndef indices_of_occurrences(string, char):\n", "\ndef is_arithmetic_sequence(arr):\n", "\ndef reverse_quick_sort(arr):\n", "\ndef find_div_by_a_or_b(numbers, a, b):\n", "\ndef transpose_matrix(matrix):\n", "\ndef count_character_occurrences(string):\n", "\ndef generate_string(n, k):\n", "\ndef merge_sort(arr):\n", "\ndef find_substrings_with_char(string, char):\n", "\ndef merge_strings_by_ascii(str1, str2):\n", "\ndef rotate_matrix(matrix, n):\n", "\ndef find_first_repeating_subsequence(string):\n", "import re\n\n\ndef is_valid_email(email):\n", "\ndef is_substring(substring, string):\n", "import math\n\n\ndef sum_circle_areas(n):\n", "import re\n\n\ndef substring_occurs_twice(string, substring):\n", "\ndef calculate_knight_moves(m, n, x, y):\n", "\ndef calculate_sum_exceed_index(arr, x):\n", "\ndef fizz_buzz(x):\n", "\ndef validate_parenthesis_brackets_in_string(string):\n", "\ndef pascal_triangle(n):\n", "import re\n\n\ndef get_directories_from_path(path):\n", "\ndef countdown_strings(n):\n", "\ndef transpose_strings(string_list):\n", "\ndef heapsort(arr):\n", "\ndef length_of_each_word(s):\n", "\ndef min_moves_for_equal_elements(nums):\n", "\ndef generate_word(s: str) -> str:\n", "\ndef partition_lists(nums, x):\n", "\ndef count_anagram_substring_pairs(string):\n", "\ndef longest_repeating_substring(s):\n", "import re\n\n\ndef validate_time_format(time_str):\n", "\ndef generate_frequency_dictionary(string):\n", "import re\n\n\ndef remove_non_alpha_words(string):\n", "\ndef staircase_string(string):\n", "import re\n\n\ndef compute_time_difference(time1, time2):\n", "\ndef swap_characters(string, i, j):\n", "\ndef find_kth_largest(nums, k):\n", "\ndef count_primes(n):\n", "\ndef h_index(citations):\n", "\ndef heapify(arr, n, i):\n"]